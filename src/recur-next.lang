schema Date
  month: Numeric
  day: Numeric
  year: Numeric
end 

schema RecurringTransaction:
  id: Numeric
  amount: Numeric
  name: String
  recurrence_rule: String
end

schema CreateRecurringTransaction:
  amount: Numeric
  name: String
  recurrence_rule: String  
end

schema Budget:
  recurring_transactions: [RecurringTransaction]
  
  def create_recurring_transaction(rtc: CreateRecurringTransaction)
    recurring_transactions.create!(rtc)
  end

  def delete_recurring_transaction(rt: RecurringTransaction)
    recurring_transactions.delete!(rt)
  end

  def update_recurring_transaction(rt: RecurringTransaction)
    recurring_transactions.update!(rt)
  end

  def view_recurring_transactions()
    recurring_transactions.read!()
  end
end

schema ScheduledTransaction:
  amount: Numeric
  name: String
  occurs_on: Date
end

def linear_month_to_year(month, base_year)
  if month > 12: base_year + month / 12 else base_year
end

def linear_month_to_real_month(month)
  if month % 12 == 0: 12 else month % 12
end

def calendar_date(linear_month: String, dt_start: Date, monthday: Numeric)
  let year = linear_month_to_year(linear_month, dt_start.year)
  let month = linear_month_to_real_month(linear_month)
  
  Date(year, month, day=monthday)
end

def expand(
  recurring_transaction: RecurringTransaction, 
  start_date: Date, 
  end_date: Date
): [ScheduledTransaction]
  let monthday = recurring_transaction.recurrence_rule.split(";")[1]
  let year_diff = end_date.year - start_date.year
  let linear_dt_end_month = end_date.month < start_date.month ? 12 * year_diff + end_date.month : end_date.month

  occurrences = dt_start.month
    .upto(linear_dt_end_month)
    .map { |linear_month| calendar_date(linear_month, dt_start, monthday) }

    if occurrences.first.day < dt_start.day
      occurrences.delete_at(0) 
    end
    if occurrences.last.day > dt_end.day 
      occurrences.delete_at(-1) 
    end

    occurrences
end

schema Schedule:
  budget: Budget

  def scheduled_transactions(start_date: Date, end_date: Date)
    budget.recurring_transactions
      .map { |rt| rt.expand(start_date, end_date) }
      .flatten
      .read!()
  end

  def desugared
    let a = budget.recurring_transactions
    let b = a.map { |rt| rt.expand(start_date, end_date) }
    let c = b.flatten

    c.read!()
  end
end

# Rules are invariants - these can be injected into the certification test
# and checked
rule "Scheduled transactions never exceed something":
  def something(rt: RecurringTransaction) -> Bool
    rt.amount > 5
  end

  Budget.recurring_transactions.all(something)
end

schema.state_transition { |t|
  case t:
    t.name = 'scheduled_transactions' => t.paginated.precomputed,
    _ => t.paginated
}

# Optimizations should be able to modify queries
# The goal here is to keep the spec in tact and focused on readability / communication,
# But the optimization will still be automatically shown to be semantically equivalent
# Maybe these are named 'refinement'?

optimization Budget.view_recurring_transactions:
  statements[0].replace!(
    `SELECT * FROM whatever INNER JOIN optimized on whatever.id = something`
  )  
end
