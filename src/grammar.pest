Program = _{ SOI ~ (Statement ~ NEWLINE*)* ~ EOI }

Statement = { SchemaDef | SchemaMethod | TypeDef }

WHITESPACE = _{ " " | "\t" }

Identifier = @{ !"end" ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_" | "!")* }

NumberLiteral = @{ ASCII_DIGIT }

Receiver = { Identifier }

MethodArg = {  Expr  }

LetExpr = { "let" ~ Identifier ~ "=" ~ Expr }

FuncCall = { Identifier ~ "(" ~ MethodArg* ~ ("," ~ MethodArg)* ~ ")" }

Constructor = { Identifier ~ "(" ~ MethodArg* ~ ("," ~ MethodArg)* ~ ")" }

DotAccess = { Identifier ~ "." ~ Identifier }

MethodCall = { Receiver ~ "." ~ Identifier ~ "(" ~ MethodArg* ~ ("," ~ MethodArg)* ~ ")" }

Expr = _{  MethodCall | DotAccess | LetExpr | FuncCall | Identifier | NumberLiteral }

ExprList = { (Expr ~ NEWLINE)+ }

Type = { Identifier }

ArrayType = { "[" ~ Identifier ~ "]" }

SchemaType = _{ Type | ArrayType }

TypedIdentifier = { Identifier ~ ":" ~ SchemaType }

SchemaAttribute = { TypedIdentifier }

MethodDefArgs = { Identifier ~ "(" ~ TypedIdentifier* ~ ("," ~ TypedIdentifier)* ~ ")" }

MethodDefNoArgs = { Identifier }

MethodBody = { ExprList }

SchemaMethod = { "def" ~ (MethodDefArgs | MethodDefNoArgs) ~ NEWLINE  ~ MethodBody ~ "end" }

SchemaBody = { ((SchemaAttribute | SchemaMethod) ~ NEWLINE*)* }

SchemaDef = { ("schema" | "domain") ~ Identifier ~ ":" ~ NEWLINE ~ SchemaBody ~ "end" }

Variant = { Identifier ~ ("(" ~ Type ~ ("," ~ Type)* ~ ")")* }

TypeBody = { ("|" ~ Variant ~ NEWLINE*)+ }

TypeDef = { "type" ~ Identifier ~ ":" ~ NEWLINE ~ TypeBody ~ "end" }
