* Support associations, i.e. has_many queries

* Develop the language-integrated query interface / mechanism. I.e. figure out how to generate SQL
  from spec code

* Get left-recursion working. Specifically, enable method chaining

Future:

* Generate typed AST after type checking. Currently type checking is always performed on the fly, even though 
  types are known after parsing

* Enable writing generated code as macros. It's painful to generate code using the AST directly.
  Using a quasi-quoted macro to express code, a la Nim, should make generating code much smoother.
  Note: this will require parsing the target language, TS currently. Svelte does this 
  via code-red: https://www.npmjs.com/package/code-red.

* State slices: needed for scalability of specs. Instead of generating full state for each property test iteration,
  generate only the referenced state variables for a particular action.

* Generate db migrations from current db schema and a specification

* Format output JS with prettier

* Pagination - how to show that pagination is a simulation of the model?

* count-based query optimization. Based on size of table, move logic into SQL or in-memory

* Action comment translates to logs

* Create documentation on language construct equivalences, e.g. state access and SELECT, create! and INSERT, etc.

* Introduce serialization-specific logic, like converting dates, numbers, encrypting IDs, etc.

* Introduce semantics-preserving caching, i.e. store in Redis under the hood. Hopefully no syntactic overhead

* Support different backends. Should be able to compile to different languages as well
  as architectures / patterns. For example, compile to microservices, monolithic backend,
  relational DB, MongoDB, DynamoDB, etc.